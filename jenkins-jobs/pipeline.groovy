// Defined our job and their names
INT_JOB_NAME = '10_file-pattern-scanner-integrate'
CHANGELOG_JOB_NAME = '20_file-pattern-scanner-changelog'
RELEASE_JOB_NAME = '90_file-pattern-scanner-release'

// We put them in a list, in the order the pipeline should look like:
JOBS = [INT_JOB_NAME, CHANGELOG_JOB_NAME, RELEASE_JOB_NAME]

// Define some common things for all jobs.
class common {
    static String REPOSITORY_URL = 'https://github.com/Praqma/file-pattern-scanner.git'
    static String MAIN_BRANCH = 'master'
    static String REMOTE_NAME = 'origin'
    static String JOB_LABELS = 'jenkinsubuntu'
    static String AUTOMATION_USER = 'ReleasePraqma'
    static Integer NUM_OF_BUILDS_TO_KEEP = 100
  	static String GITHUB_PRAQMA_CREDENTIALS = '100247a2-70f4-4a4e-a9f6-266d139da9db'

    static jobSetup(def job) {
        job.with {
            // FIXME - also make some keep jobs, through promotion, to ensure release jobs are kept
            logRotator {
                numToKeep(NUM_OF_BUILDS_TO_KEEP)
            }

            label(JOB_LABELS)
            properties {
                ownership {
                    primaryOwnerId('bue')
                    coOwnerIds('thi')
                }
            }

            authorization {
                permission('hudson.model.Item.Read', 'anonymous')
            }

            scm {
                git {
                    remote {
                        name(REMOTE_NAME)
                        url(REPOSITORY_URL)
                        credentials(GITHUB_PRAQMA_CREDENTIALS)
                    }
                    branch("$REMOTE_NAME/$MAIN_BRANCH")
                }
            }

            wrappers {
                buildName('${BUILD_NUMBER}#${GIT_REVISION,length=8}(${GIT_BRANCH})')
            }
            publishers {
                // FIXME - user env. var inject, send to buileder...
                mailer('bue@praqma.net', true, true)
            }
        }
    }
}

// Generated the actaul jobs, iterating over the list of jobs above and uses common parts.
// But iteration is manual, to avoid to many switches and checks on iteration as the following
// bits and pieces of the jobs are different.

// Integration job
Integer i = 0
def curr = JOBS[i]
def next = i < JOBS.size() - 1 ? JOBS[i + 1] : null
println("$curr $next")
job(curr) { job ->
    common.jobSetup(job)
    // Overwriting common scm configuration
    scm {
        git {
            remote {
                name(common.REMOTE_NAME)
                url(common.REPOSITORY_URL)
                credentials(common.GITHUB_PRAQMA_CREDENTIALS)
            }
            branch = common.REMOTE_NAME
            branch("$branch/ready/**")
            extensions {
                wipeOutWorkspace()
            }
        }
    }

    triggers {
        githubPush()
    }

    wrappers {
        pretestedIntegration("SQUASHED", common.MAIN_BRANCH, common.REMOTE_NAME)
    }
    steps {
        shell('''
echo FIXME can not run on slave!
echo groovy tests/scannerTest.groovy
''')
    }
    publishers {
        pretestedIntegration()
        if (i == JOBS.size() - 2) { // last job, is manually triggerede release job
            buildPipelineTrigger(next) {
                parameters {
                    gitRevision()
                }
            }
        } else {
            if (next != null) {
                downstream(next, 'SUCCESS')
            }
        }
    }
}

// changelog job
i += 1
curr = JOBS[i]
next = i < JOBS.size() - 1 ? JOBS[i + 1] : null
println("$curr $next")
job(curr) { job ->
    common.jobSetup(job)

    // overwrite labels - need to run on a docker host
    label('dockerhost1')

    //We inject the globally defined passwords.
    //The shell step require a password. We inject this password from our global configuration in a variable 'secret_password_pac'. This can be configured if you wish to
    //use a different method to provide the password. The password for this is our GitHub read-access token.
    //We use configure because passwordwrapper for job-dsl is bugged
    configure { project ->
        project / buildWrappers / EnvInjectPasswordWrapper {
            injectGlobalPasswords(true)
            maskPasswordParameters(true)
        }
    }
    steps {
        shell('docker run --rm -v $(pwd):/data praqma/pac:2.1.0-6 from-latest-tag "*" --settings=/data/changelog_settings.yml -c ReleasePraqma $secret_password_pac jira')
    }
    publishers {
        publishers {
            archiveArtifacts {
                pattern('changelog.*')
            }
            publishHtml {
                report('.') {
                    reportName("Autogenerated file-pattern-scanner changelog")
                    reportFiles('changelog.html')
                }

            }
            if (i == JOBS.size() - 2) { // last job, is manually triggerede release job
                buildPipelineTrigger(next) {
                    parameters {
                        gitRevision()
                    }
                }
            } else {
                if (next != null) {
                    downstreamParameterized {
                        trigger(next) {
                            parameters {
                                gitRevision()
                            }

                        }
                    }
                }
            }
        }
    }
}

// release job
i += 1
curr = JOBS[i]
next = i < JOBS.size() - 1 ? JOBS[i + 1] : null
println("$curr $next")
job(curr) { job ->
    common.jobSetup(job)

    wrappers {
        buildName('${BUILD_NUMBER}#${GIT_REVISION,length=8}(${GIT_BRANCH})-=${ENV,var="FULL_VERSION"}')

        environmentVariables {
            propertiesFile('./version.properties')
            env('FULL_VERSION', 'v$VERSION-$BUILD_NUMBER')
        }
    }
    //We inject the globally defined passwords.
    //The shell step require a password. We inject this password from our global configuration in a variable 'secret_password_pac'. This can be configured if you wish to
    //use a different method to provide the password. The password for this is our GitHub read-access token.
    //We use configure because passwordwrapper for job-dsl is bugged
    configure { project ->
        project / buildWrappers / EnvInjectPasswordWrapper {
            injectGlobalPasswords(true)
            maskPasswordParameters(true)
        }
    }

    steps {
        shell('''
echo Inserting full version number in version in script
sed -i 's/String versionNumber = "0.0.0-dev"/String versionNumber = "'$FULL_VERSION'"/g' src/scanner.groovy
''')
        shell('''echo script modified, so need to check it still works!
echo FIXME can not run on slave!
echo groovy tests/scannerTest.groovy
''')
        copyArtifacts(JOBS[i-1]) {
            includePatterns('changelog.md')
            targetDirectory('.')
            buildSelector {
                latestSuccessful(true)
            }
        }
        shell('''
./create_json.sh
curl --user "ReleasePraqma:$secret_password_pac" -X POST --data @release.json https://api.github.com/repos/praqma/file-pattern-scanner/releases
''')
    }
    publishers {
        if (i == JOBS.size() - 2) { // last job, is manually triggerede release job
            buildPipelineTrigger(next) {
                parameters {
                    gitRevision()
                }
            }
        } else {
            if (next != null) {
                downstreamParameterized {
                    trigger(next) {
                        parameters {
                            gitRevision()
                        }

                    }
                }
            }
        }
        git {
            pushOnlyIfSuccess()
            tag(common.REMOTE_NAME, '$FULL_VERSION') {
                message('')
                create()
            }

        }
        archiveArtifacts {
            pattern('src/scanner.groovy, version.properties, release.json')
        }
    }
}
